services:
  zookeeper:
    image: bitnami/zookeeper:3.5
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      - ZOO_ENABLE_AUTH=yes
      - ZOO_SERVER_USERS=admin
      - ZOO_SERVER_PASSWORDS=admin-secret
    networks:
      - kafka-net

  kafka-0:
    image: bitnami/kafka:2.8.1
    container_name: kafka-0
    expose:
      - 9092
      - 9093
      - 9094
    ports:
      - "29092:29092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_CFG_BROKER_ID: 0
      ALLOW_PLAINTEXT_LISTENER: yes
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,SSL:SSL,SASL_SSL:SASL_SSL,EXTERNAL:PLAINTEXT
      KAFKA_CFG_LISTENERS: INTERNAL://:9092,SSL://:9093,SASL_SSL://:9094,EXTERNAL://:29092
      KAFKA_CFG_ADVERTISED_LISTENERS: INTERNAL://kafka-0:9092,SSL://kafka-0:9093,SASL_SSL://kafka-0:9094,EXTERNAL://localhost:29092
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: SSL

      # SSL Configuration
      KAFKA_CFG_SSL_KEYSTORE_LOCATION: /opt/bitnami/kafka/config/certs/kafka.keystore.jks
      KAFKA_CFG_SSL_TRUSTSTORE_LOCATION: /opt/bitnami/kafka/config/certs/kafka.truststore.jks
      KAFKA_CFG_SSL_KEYSTORE_PASSWORD: supersecret
      KAFKA_CFG_SSL_KEY_PASSWORD: supersecret
      KAFKA_CFG_SSL_TRUSTSTORE_PASSWORD: supersecret

      # SASL Configuration
      KAFKA_CFG_SASL_ENABLED_MECHANISMS: SCRAM-SHA-256
      KAFKA_CFG_SASL_MECHANISM_INTER_BROKER_PROTOCOL: SCRAM-SHA-256

      # ACL Configuration
      KAFKA_CFG_SUPER_USERS: User:admin
      KAFKA_CFG_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_CFG_ALLOW_EVERYONE_IF_NO_ACL_FOUND: true
    volumes:
      - ./keystore/kafka-0.server.keystore.jks:/opt/bitnami/kafka/config/certs/kafka.keystore.jks:ro
      - ./truststore/kafka.truststore.jks:/opt/bitnami/kafka/config/certs/kafka.truststore.jks:ro
      - ./kafka_jaas.conf:/opt/bitnami/kafka/config/kafka_jaas.conf:ro
      - ./command.properties:/opt/bitnami/kafka/config/command.properties:ro
    networks:
      - kafka-net

  kafka-init:
    image: bitnami/kafka:2.8.1
    container_name: kafka-init
    depends_on:
      - kafka-0
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka-0:9093
      COMMAND_PROPERTIES: /opt/bitnami/kafka/config/command.properties
    volumes:
      - ./truststore/kafka.truststore.jks:/opt/bitnami/kafka/config/certs/kafka.truststore.jks:ro
      - ./command.properties:/opt/bitnami/kafka/config/command.properties:ro
      - ./scripts/kafka-init.sh:/kafka-init.sh:ro
    command: [ "bash", "/kafka-init.sh" ]
    networks:
      - kafka-net

#  producer:
#    build:
#      context: .
#      dockerfile: ./event-simulator-service/Dockerfile
#    container_name: producer
#    depends_on:
#      - kafka-0
#    environment:
#      DATA_PATH: ./data
#      KAFKA_BROKERS: kafka-0:9094
#      KAFKA_EVENT_TOPIC: ${KAFKA_EVENT_TOPIC}
#      NUMBER_SIMULATION_PROCESSES: 4
#      MIN_SESSION_INTERVAL_SECONDS: 1
#      MAX_SESSION_INTERVAL_SECONDS: 10
#      MIN_EVENT_INTERVAL_SECONDS: 1
#      MAX_EVENT_INTERVAL_SECONDS: 10
#    networks:
#      - kafka-net
#
#  consumer:
#    build:
#      context: .
#      dockerfile: ./analytics-service/Dockerfile
#    container_name: consumer
#    depends_on:
#      kafka:
#        condition: service_healthy
#    environment:
#      KAFKA_BROKERS: kafka:9092
#      KAFKA_GROUP_ID: analytics-service
#      KAFKA_EVENT_TOPIC: e-commerce-events
#      WORKER_PROCESS_NUMBER: 8
#      GOOGLE_APPLICATION_CREDENTIALS: ../secret/serviceAccountKey.json
#      GCLOUD_PROJECT: ecommerce-kafka-analytic-b9267
#      FIRESTORE_EMULATOR_HOST: host.docker.internal:8080
#    volumes:
#      - ./secret/serviceAccountKey.json:/secret/serviceAccountKey.json
#    networks:
#      - kafka-net

networks:
  kafka-net:
    name: kafka-network